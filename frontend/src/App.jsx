// src/App.jsx
import React, { useState } from 'react';
import './App.css';

const SkinScanApp = () => {
  const [image, setImage] = useState(null);
  const [result, setResult] = useState(null);
  const [loading, setLoading] = useState(false);

  // –ò–º–∏—Ç–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ –Ω–µ–π—Ä–æ—Å–µ—Ç—å—é
  const mockAnalysis = (file) => {
    const types = [
      { condition: '–ü—Ä—ã—â / –∞–∫–Ω–µ', recommendation: '–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–∞–ª–∏—Ü–∏–ª–æ–≤—É—é –∫–∏—Å–ª–æ—Ç—É, –∏–∑–±–µ–≥–∞—Ç—å –∂–∏—Ä–Ω–æ–π –ø–∏—â–∏.' },
      { condition: '–ê–ª–ª–µ—Ä–≥–∏—á–µ—Å–∫–∞—è —Ä–µ–∞–∫—Ü–∏—è', recommendation: '–í–æ–∑–º–æ–∂–Ω–æ, –∫–æ–Ω—Ç–∞–∫—Ç —Å —Ä–∞–∑–¥—Ä–∞–∂–∏—Ç–µ–ª–µ–º. –ü—Ä–∏–º–∏—Ç–µ –∞–Ω—Ç–∏–≥–∏—Å—Ç–∞–º–∏–Ω–Ω–æ–µ.' },
      { condition: '–≠–∫–∑–µ–º–∞', recommendation: '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —É–≤–ª–∞–∂–Ω—è—é—â–∏–π –∫—Ä–µ–º, –∏–∑–±–µ–≥–∞–π—Ç–µ –≥–æ—Ä—è—á–µ–≥–æ –¥—É—à–∞.' },
      { condition: '–ü–∞–ø–∏–ª–ª–æ–º–∞', recommendation: '–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –¥–µ—Ä–º–∞—Ç–æ–ª–æ–≥—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.' },
      { condition: '–†–æ–¥–∏–Ω–∫–∞ (–Ω–µ–≤—É—Å)', recommendation: '–ù–µ —Ç—Ä–æ–≥–∞–π—Ç–µ. –ü—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ ‚Äî —Å—Ä–æ—á–Ω–æ –∫ –≤—Ä–∞—á—É.' },
    ];
    return types[Math.floor(Math.random() * types.length)];
  };

  const handleTakePhoto = async () => {
    try {
      // –ò–º–∏—Ç–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–º–µ—Ä–µ —á–µ—Ä–µ–∑ Telegram
      const input = document.createElement('input');
      input.type = 'file';
      input.accept = 'image/*';
      input.capture = 'environment'; // –∑–∞–¥–Ω—è—è –∫–∞–º–µ—Ä–∞

      input.onchange = (e) => {
        const file = e.target.files[0];
        if (file) {
          const imageUrl = URL.createObjectURL(file);
          setImage(imageUrl);
          setLoading(true);

          // –≠–º—É–ª—è—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –Ω–µ–π—Ä–æ—Å–µ—Ç—å
          setTimeout(() => {
            const analysis = mockAnalysis(file);
            setResult(analysis);
            setLoading(false);
          }, 2000);
        }
      };

      input.click();
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–º–µ—Ä–µ:', err);
      alert('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –∫–∞–º–µ—Ä—É. –†–∞–∑—Ä–µ—à–∏—Ç–µ –¥–æ—Å—Ç—É–ø.');
    }
  };

  const handleReset = () => {
    setImage(null);
    setResult(null);
    setLoading(false);
  };

  return (
    <div className="skin-scan-app">
      <h1>üì∏ SkinScan AI</h1>
      <p>–ù–∞–≤–µ–¥–∏—Ç–µ –∫–∞–º–µ—Ä—É –Ω–∞ –∫–æ–∂–Ω—É—é –∞–Ω–æ–º–∞–ª–∏—é –∏ —Å–¥–µ–ª–∞–π—Ç–µ —Å–Ω–∏–º–æ–∫</p>

      {!image ? (
        <button className="photo-btn" onClick={handleTakePhoto}>
          üì∑ –°–¥–µ–ª–∞—Ç—å —Ñ–æ—Ç–æ
        </button>
      ) : (
        <div className="result-section">
          <img src={image} alt="Skin anomaly" className="preview" />

          {loading ? (
            <div className="loading">
              <p>–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º... ‚è≥</p>
            </div>
          ) : (
            <div className="diagnosis">
              <h2>üîé –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞</h2>
              <p><strong>–î–∏–∞–≥–Ω–æ–∑:</strong> {result.condition}</p>
              <p><strong>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</strong> {result.recommendation}</p>
              <button className="retry-btn" onClick={handleReset}>
                –°–¥–µ–ª–∞—Ç—å –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ
              </button>
            </div>
          )}
        </div>
      )}

      <footer className="footer">
        <small>‚ö†Ô∏è –≠—Ç–æ –Ω–µ –∑–∞–º–µ–Ω–∞ –≤—Ä–∞—á—É. –ü—Ä–∏ —Å–µ—Ä—å—ë–∑–Ω—ã—Ö —Å–∏–º–ø—Ç–æ–º–∞—Ö ‚Äî –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –¥–µ—Ä–º–∞—Ç–æ–ª–æ–≥—É.</small>
      </footer>
    </div>
  );
};

export default SkinScanApp;