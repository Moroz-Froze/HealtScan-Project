# backend/test_api.py
import requests
import json
import time

BASE_URL = "http://localhost:8000"

def test_health_check():
    """–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è API"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ health check...")
    response = requests.get(f"{BASE_URL}/health")
    assert response.status_code == 200
    print("‚úÖ Health check passed")
    return response.json()

def test_root_endpoint():
    """–¢–µ—Å—Ç –∫–æ—Ä–Ω–µ–≤–æ–≥–æ endpoint"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ root endpoint...")
    response = requests.get(f"{BASE_URL}/")
    assert response.status_code == 200
    print("‚úÖ Root endpoint passed")
    return response.json()

def test_auth():
    """–¢–µ—Å—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏...")
    auth_data = {
        "initData": "user=%7B%22id%22%3A12345%2C%22first_name%22%3A%22Test%22%2C%22username%22%3A%22testuser%22%7D"
    }
    response = requests.post(f"{BASE_URL}/api/auth/", json=auth_data)
    assert response.status_code == 200
    data = response.json()
    assert "access_token" in data
    print("‚úÖ Authentication passed")
    return data["access_token"]

def test_subscription_plans():
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ø–ª–∞–Ω–æ–≤ –ø–æ–¥–ø–∏—Å–∫–∏"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–ª–∞–Ω–æ–≤ –ø–æ–¥–ø–∏—Å–∫–∏...")
    response = requests.get(f"{BASE_URL}/api/subscription/plans")
    assert response.status_code == 200
    data = response.json()
    assert "plans" in data
    assert len(data["plans"]) > 0
    print("‚úÖ Subscription plans passed")
    return data

def test_literature_list():
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä—ã"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä—ã...")
    response = requests.get(f"{BASE_URL}/api/literature/")
    assert response.status_code == 200
    data = response.json()
    assert "literature" in data
    print("‚úÖ Literature list passed")
    return data

def test_with_auth(token):
    """–¢–µ—Å—Ç endpoints —Ç—Ä–µ–±—É—é—â–∏—Ö –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    headers = {"Authorization": f"Bearer {token}"}
    
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ /api/auth/me...")
    response = requests.get(f"{BASE_URL}/api/auth/me", headers=headers)
    assert response.status_code == 200
    print("‚úÖ Auth me passed")
    
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏...")
    response = requests.get(f"{BASE_URL}/api/subscription/status", headers=headers)
    assert response.status_code == 200
    print("‚úÖ Subscription status passed")
    
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–±–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏...")
    sub_data = {"subscription_type": "trial"}
    response = requests.post(f"{BASE_URL}/api/subscription/create", json=sub_data, headers=headers)
    # –ú–æ–∂–µ—Ç –±—ã—Ç—å 200 (—Å–æ–∑–¥–∞–Ω–∞) –∏–ª–∏ 400 (—É–∂–µ –µ—Å—Ç—å)
    assert response.status_code in [200, 400]
    print("‚úÖ Subscription creation passed")
    
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏...")
    response = requests.get(f"{BASE_URL}/api/history/", headers=headers)
    assert response.status_code == 200
    print("‚úÖ History passed")

def run_tests():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ HealthScan API...\n")
    print("üåê –§—Ä–æ–Ω—Ç–µ–Ω–¥: https://moroz-froze-healtscan-project-cce0.twc1.net")
    print("üîß Backend API: http://localhost:8000")
    print("=" * 60)
    
    try:
        # –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –±–µ–∑ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        test_health_check()
        test_root_endpoint()
        test_subscription_plans()
        test_literature_list()
        
        # –¢–µ—Å—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        token = test_auth()
        
        # –¢–µ—Å—Ç—ã —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π
        test_with_auth(token)
        
        print("\n" + "=" * 60)
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        print("‚úÖ API –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–µ–Ω")
        print("üåê –§—Ä–æ–Ω—Ç–µ–Ω–¥ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ —Å –±—ç–∫—ç–Ω–¥–æ–º")
        print("üì± –û—Ç–∫—Ä–æ–π—Ç–µ: https://moroz-froze-healtscan-project-cce0.twc1.net")
        
    except requests.exceptions.ConnectionError:
        print("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É")
        print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω:")
        print("   cd backend && python start_server.py")
    except AssertionError as e:
        print(f"‚ùå –¢–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω: {e}")
    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    run_tests()
